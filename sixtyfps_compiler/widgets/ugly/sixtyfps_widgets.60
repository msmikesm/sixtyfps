/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

global Palette := {
    property<color> window_background: #ecedeb;
    property<color> text_color: #090909;
    property<color> text_color_disabled: lightgray;
    property<color> text_color_secondary: #111;
    property<color> button_background: #aaa;
    property<color> highlight_background: #556884;
    property<color> placeholder_text: #ccc;
    property<color> border_color: #d0d3cf;
    property<color> base_background_color: white;
    property<color> checkbox_unchecked_indicator: #aaa;
}

export global StyleMetrics := {
    property<logical_length> layout_spacing: 5px;
    property<logical_length> layout_padding: 5px;
}

export Button := Rectangle {
    signal clicked;
    property<string> text;
    property<length> font_size;
    property<bool> pressed: self.enabled && touch_area.pressed;
    property<bool> enabled: true;

    border_width: 1px;
    border_radius: 2px;
    border_color: Palette.text_color;
    color: self.pressed ? Palette.highlight_background : Palette.button_background;
    animate color { duration: 100ms; }
    horizontal-stretch: 0;
    vertical-stretch: 0;


    GridLayout {
        padding: root.border_radius + 8px;

        Text {
            text: root.text;
            font_size: root.font_size;
            horizontal_alignment: align_center;
            vertical_alignment: align_center;
            color: root.enabled ? Palette.text_color : Palette.text_color_disabled;
        }
    }

    touch_area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            if (root.enabled) {
                root.clicked();
            }
        }
    }
}

export CheckBox := Rectangle {
    signal toggled;
    property <string> text;
    property <bool> checked;
    property<bool> enabled: true;

    maximum_height: 20px;
    minimum_height: 20px;
    minimum_width: 120px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    // the check box iteself
    indicator := Rectangle {
        height: root.height;
        width: root.height * 2;
        border_width: 1px;
        border_radius: root.height / 2;
        border_color: root.enabled ? (root.checked ? Palette.highlight_background : black) : Palette.text_color_disabled;
        color: root.checked ? (root.enabled ? Palette.highlight_background : Palette.text_color_disabled) : white;
        animate color { duration: 100ms; }

        bubble := Rectangle {
            width: root.height - 8px;
            height: bubble.width;
            border_radius: bubble.height / 2;
            y: 4px;
            x: 4px + a * (indicator.width - bubble.width - 8px);
            property <float> a: root.checked ? 1 : 0;
            color: root.checked ? white : (root.enabled ? Palette.button_background : Palette.text_color_disabled);
            animate a, color { duration: 200ms; easing: ease;}
        }
    }

    Text {
        x: indicator.width + 8px;
        text: root.text;
        vertical_alignment: align_center;
        width: parent.width - self.x;
        height: parent.height;
        color: root.enabled ? Palette.text_color : Palette.text_color_disabled;
    }

    touch_area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            root.checked = !root.checked;
            root.toggled();
        }
    }

}

SpinBoxButton := Rectangle {
    signal clicked;
    property<string> text;
    property <length> font_size;
    border_width: 1px;
    border_radius: 2px;
    border_color: black;
    color: touch.pressed ? Palette.highlight_background : Palette.button_background;
    animate color { duration: 100ms; }
    touch := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => { root.clicked(); }
    }
    Text {
        x: touch.pressed ? 1px : 0px;
        y: touch.pressed ? 1px : 0px;
        width: parent.width;
        height: parent.height;
        vertical_alignment: align_center;
        horizontal_alignment: align_center;
        text: root.text;
        font_size: root.font_size;
        color: Palette.text_color;
    }
}

export SpinBox := Rectangle {
    signal toggled;
    property <string> text;
    property <bool> checked;
    property <int> value;
    property <length> font_size;
    property<bool> enabled: true;

    color: white;

    maximum_height: 40px;
    minimum_height: 40px;
    minimum_width: 120px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    SpinBoxButton {
        text: "-";
        font_size: root.font_size;
        clicked => { root.value -= 1; }
        width: parent.height;
        height: parent.height;
    }

    plus_button := SpinBoxButton {
        width: parent.height;
        height: parent.height;
        x: parent.width - self.width;
        font_size: root.font_size;
        text: "+";
        clicked => { root.value += 1; }
    }

    Text {
        text: root.value;
        font_size: root.font_size;
        x: parent.height + 15px;
        width: plus_button.x - self.x - 15px;
        height: parent.height;
        horizontal_alignment: align_center;
        vertical_alignment: align_center;
        color: root.enabled ? Palette.text_color : Palette.text_color_disabled;
    }
}

export Slider := Rectangle {
    property<float> max: 100;
    property<float> min: 0;
    property<float> value;

    maximum_height: 40px;
    minimum_height: 40px;
    minimum_width: 120px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    slider_filled := Rectangle {
        width: parent.width;
        y: parent.height / 3;
        height: parent.height / 3;
        border_width: 1px;
        border_radius: 2px;
        border_color: black;
        color: Palette.highlight_background;
    }

    slider_empty := Rectangle {
        y: slider_filled.y;
        x: handle.x;
        width: parent.width - self.x;
        height: slider_filled.height;
        border_width: slider_filled.border_width;
        border_radius: slider_filled.border_radius;
        border_color: slider_filled.border_color;
        color: Palette.button_background;
    }

    handle := Rectangle {
        width: parent.height / 3;
        height: parent.height;
        border_width: 1px;
        border_radius: self.height / 2;
        border_color: black;
        color: touch_area.pressed ? Palette.button_background : white;
        animate color { duration: 100ms; }
        x: (root.width - handle.width) * (new_value - min)/(max - min);
        property<float> new_value_tmp : touch_area.pressed
            ? root.value + (touch_area.mouse_x - touch_area.pressed_x) * (max - min) / (root.width - handle.width)
            : root.value;
        property<float> new_value : new_value_tmp < root.min ? root.min
            : new_value_tmp > root.max ? root.max : new_value_tmp;
    }
    touch_area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.value = handle.new_value;
        }
    }
}

export GroupBox := GridLayout {
    property <string> title;
    property<bool> enabled: true;

    spacing: 5px;
    Row {
        Text {
            text: root.title;
            vertical-stretch: 0;
            color: root.enabled ? Palette.text_color : Palette.text_color_disabled;
        }
    }
    Row {
        Rectangle {
            border_width: 1px;
            border_color: Palette.border_color;
            border_radius: 2px;
            color: white;

            GridLayout {
                padding: 10px;
                $children
            }
        }
    }
}

export LineEdit := Rectangle {
    property <string> text;
    property <string> placeholder_text;
    property <bool> has_focus: input.has_focus;
    property <bool> enabled: true;
    signal accepted(string);
    signal edited(string);

    border_color: root.has_focus ? Palette.highlight_background : #ffffff;
    border_radius: 1px;
    border_width: 2px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    GridLayout {
        padding: 3px;

        Rectangle {
            border_color: #ecedeb;
            border_radius: 1px;
            border_width: 1px;
            color: white;

            GridLayout {
                padding: 3px;
                input := TextInput {
                    enabled: root.enabled;
                    text <=> root.text;
                    accepted => {
                        root.accepted(self.text);
                    }
                    edited => {
                        root.edited(self.text);
                    }
                }
                Text {
                    color: Palette.placeholder_text;
                    col: 0;
                    row: 0;
                    text: root.text == "" ? root.placeholder_text : "";
                }
            }
        }

    }
}

ScrollBar := Rectangle {
    color: white;
    border_color: Palette.button_background;
    border_width: 1px;
    property <bool> horizontal;
    property<length> max;
    property<length> page_size;
    // this is always negative and migger than  -max
    property<length> value;

    handle := Rectangle {
        width: !horizontal ? parent.width : max <= 0phx ? 0phx : parent.width * (page_size / (max + page_size));
        height: horizontal ? parent.height : max <= 0phx ? 0phx : parent.height * (page_size / (max + page_size));

        border_width: 1px;
        border_radius: self.width / 2;
        border_color: black;
        color: touch_area.pressed ? Palette.highlight_background : Palette.button_background;
        animate color { duration: 100ms; }
        x: !horizontal ? 0phx : (root.width - handle.width) * (new_value / max);
        y: horizontal ? 0phx : (root.height - handle.height) * (new_value / max);
        property<length> new_value_tmp : -root.value + (
            !touch_area.pressed ? 0phx
            : horizontal ?  (touch_area.mouse_x - touch_area.pressed_x) * (max / (root.width - handle.width))
            : (touch_area.mouse_y - touch_area.pressed_y) * (max / (root.height - handle.height)));
        property<length> new_value : new_value_tmp < 0phx ? 0phx
            : root.max < 0phx ? 0phx
            : new_value_tmp > root.max ? root.max : new_value_tmp;
    }
    touch_area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.value = -handle.new_value;
        }
    }

}

export ScrollView := Rectangle {
    property <length> viewport_width <=> fli.viewport_width;
    property <length> viewport_height <=> fli.viewport_height;
    property <length> viewport_x <=> fli.viewport_x;
    property <length> viewport_y <=> fli.viewport_y;
    property <length> visible_width <=> fli.width;
    property <length> visible_height <=> fli.height;
    minimum_height: 50px;
    minimum_width: 50px;
    border_width: 1px;
    border_color: Palette.border_color;
    color: Palette.base_background_color;
    horizontal-stretch: 1;
    vertical-stretch: 1;

    fli := Flickable {
        $children
        x: 1px;
        y: 1px;
        interactive: false;
        viewport_y <=> vbar.value;
        viewport_x <=> hbar.value;
        viewport_height: 1000px;
        viewport_width: 1000px;
        width: parent.width - vbar.width - 1px;
        height: parent.height - hbar.height -1px;
    }
    vbar := ScrollBar {
        width: 20px;
        x: fli.width + fli.x;
        height: fli.height + fli.y;
        horizontal: false;
        max: fli.viewport_height - fli.height;
        page_size: fli.height;
    }
    hbar := ScrollBar {
        height: 20px;
        y: fli.height + fli.y;
        width: fli.width + fli.x;
        horizontal: true;
        max: fli.viewport_width - fli.width;
        page_size: fli.width;
    }
}

export ListView := ScrollView {
    $children
}

export StandardListView := ListView {
    property<[StandardListViewItem]> model;
    property<int> current_item: -1;
    for item[idx] in model : Rectangle {
        Text {
            text: item.text;
            color: Palette.text_color;
        }
        height: 20px;
        width: parent.visible_width;
        color: current_item == idx ? Palette.highlight_background : transparent;
        TouchArea {
            width: parent.width;
            height: parent.height;
            clicked => { current_item = idx; }
        }
    }
}

export ComboBox := Rectangle {
    property <[string]> model;
    property <int> current_index : -1;
    property <string> current_value;
    property <bool> is_open: false;
    property <bool> enabled: true;

    border_width: 1px;
    border_radius: 2px;
    border_color: Palette.text_color;
    color: touch_area.pressed ? Palette.highlight_background : Palette.button_background;
    animate color { duration: 100ms; }
    horizontal-stretch: 0;
    vertical-stretch: 0;
    minimum_width: 170px;

    HorizontalLayout {
        padding: root.border_radius;
        t := Text {
            text <=> root.current_value;
            horizontal_alignment: align_center;
            vertical_alignment: align_center;
            color: root.enabled ? Palette.text_color : Palette.text_color_disabled;
            horizontal-stretch: 1;
        }
        Text {
            text:"▼";
            color: root.enabled ? Palette.text_color : Palette.text_color_disabled;
            horizontal-stretch: 0;
        }
    }

    touch_area := TouchArea {
        width: 100%;
        height: 100%;
        clicked => {
            if (root.enabled) {
                is_open = !is_open;
            }
        }
    }

    if (is_open && enabled) : Rectangle {
        y: root.height;
        width: root.width;
        for value[idx] in root.model: Rectangle {
            y: idx * height;
            width: 100%;
            height: t.height;
            color: idx == root.current_index ? Palette.highlight_background : Palette.base_background_color;
            Text {
                width: 100%;
                height: 100%;
                text: value;
            }
            TouchArea {
                width: 100%;
                height: 100%;
                clicked => {
                    if (root.enabled) {
                        root.current_index = idx;
                        root.current_value = value;
                    }
                    is_open = false;
                }
            }
        }
    }
}
